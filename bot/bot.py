import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import ClientTimeout

# -------------------------------
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -------------------------------
load_dotenv()
TOKEN = os.getenv("TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ .env –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å TOKEN
ADMIN_ID = int(os.getenv("ADMIN_ID", "5199401134"))

# -------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------------
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
# -------------------------------
timeout = ClientTimeout(total=60)
bot = Bot(token=TOKEN, timeout=timeout)
dp = Dispatcher()

# -------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# -------------------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")

# -------------------------------
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# -------------------------------
async def send_car_notification(car_data: dict):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ.
    car_data: dict —Å –∫–ª—é—á–∞–º–∏ user, brand, model, number, date, carabka_transfer, type_car, probeg
    """
    text = (
        f"üöó –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {car_data.get('user', '–ê–Ω–æ–Ω–∏–º')}\n"
        f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {car_data.get('brand')}\n"
        f"üöò –ú–æ–¥–µ–ª—å: {car_data.get('model')}\n"
        f"üî¢ –ù–æ–º–µ—Ä: {car_data.get('number')}\n"
        f"üìÖ –î–∞—Ç–∞: {car_data.get('date')}\n"
        f"‚öôÔ∏è –ö–ü–ü: {car_data.get('carabka_transfer')}\n"
        f"üöó –¢–∏–ø: {car_data.get('type_car')}\n"
        f"üìç –ü—Ä–æ–±–µ–≥: {car_data.get('probeg')}\n"
    )
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# -------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Django
# -------------------------------
def send_notification_sync(car_data: dict):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Django.
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π loop, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Event loop is closed.
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(send_car_notification(car_data))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    finally:
        loop.close()

# -------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# -------------------------------
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

# -------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
# -------------------------------
if __name__ == "__main__":
    asyncio.run(main())
